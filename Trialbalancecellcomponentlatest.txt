namespace app.plan.trialbalance.components {  

    interface ITickmarkData {
        tickmarkId: string;
        accountId: string;
        businessUnitId: string;
        businessUnitFSLevelId: string;
        mode: 'New' | 'Edit';
    }

    export interface ITickmarkDropdownProps {

        angularInjector: ng.auto.IInjectorService;
        accounts: datastore.models.IAccount[];
        tickMarkSelectedChanged(t: ITickMarkUpdatedData): void;
        row: any;
        tickmarkData: datastore.models.ITickmark[];
        OptionValues: string[];
        supplementalsService: app.supplementals.supplementals.ISupplementalsService;
        businessUnitFSLI: datastore.models.IBusinessUnitFinancialStatementLevel;
        businessUnit: datastore.models.IBusinessUnit;
        businessUnitFSLevelId: string;
    }

    interface ItickmarkDropdownState {
        value: any;
        check: any;
    }

    
    export class TickmarkDropdownCell extends React.Component<ITickmarkDropdownProps, ItickmarkDropdownState> {
        constructor(props: ITickmarkDropdownProps, protected $scope: app.ISupplementalScope<ITickmarkData>,
            protected LeadScheduleActions: app.datastore.actions.ILeadScheduleActions,
            protected TickmarkStore: app.datastore.stores.ITickmarkStore) {
            super(props);
            this.state = {
                check: false,
                value: '--'
            }
        }


       // handleClose = () => this.setState({ check: !this.state.check });
       // handleChange = (value) => this.setState({ value: value });

        //TODO Tickmark Selected Changed from the account - Update account store rerender table
        //onSelect = (e) => {

        //    this.setState(e.target.value);
      //      //this.LeadScheduleActions.saveTickmarks(this.$scope, e.target.value)
        //} 

        handleChange = (value: string) => (e: React.MouseEvent<HTMLInputElement>) => {
          //  alert('handle change'+value)
            //e.preventDefault();           
            this.setState({ value: value });
            //this.props.accounts.forEach(eachAccount => {

            //    let tickmarkDto = this.props.tickmarkData.find(t => t.accountId === eachAccount.accountId).toJS();
            //    let tickmarkId = tickmarkDto.tickmarkId;
            //    const saveData = [this.TickmarkStore.tickmarks().get(tickmarkId).merge(this.props.dto)];
            //    this.LeadScheduleActions.saveTickmarks(this.$scope, saveData);
            //});
            
            
        }

        handleClose = () => {
            //('close')
            this.setState({ check: !this.state.check });
        }

        //handleTickmark = (accountId) => {

        //}

        
        openTickmark = (accountId, businessUnitId, businessUnitFSLevelId) => {
            this.props.supplementalsService.openTickMark(accountId, businessUnitId, businessUnitFSLevelId);
        }

        render(): JSX.Element {

            const tickmarks = this.props.tickmarkData;
            const accounts = this.props.accounts;
            const businessUnitFSLevelId = this.props.businessUnitFSLevelId;
            const businessUnit = this.props.businessUnit;
            const businessUnitId = businessUnit.businessUnitId;

            const Option = (props) => {
                console.log('sai', props.value)
                const isSelect = (props.tickmark === props.value) ? true : false;

        return (
            <div>
                <li key={props.accountId} onClick={(e) => {

                    e.preventDefault();
                    props.handleChange(props.tickmark);
                    props.handleClose();

                }}
                    className={isSelect ? 'listyle':'linomral'}
                >
                    <a href='${props.tickmark}'>{props.tickmark}
                        <i className="fa fa-pencil" style={{ float: "right", right: "0", top: "0" }}  id="circleID"/>
                     </a>
                    <div className="tickmarkDesc">{props.id}</div>                   
                </li>
            </div>
        )
    }


            let rows = [];
            accounts.forEach(eachAccount => {

                let tickmarkDto = tickmarks.find(t => t.accountId === eachAccount.accountId).toJS();
                let tickMarkDescription = tickmarkDto.description;
                let tickmarkId = tickmarkDto.tickmarkId;

                var tempDiv = document.createElement("div");
                tempDiv.innerHTML = tickMarkDescription;
                let tickMarkDescText = tempDiv.textContent || tempDiv.innerText || "";


                let eachITBViewRowData = {
                    key: eachAccount.accountId,
                    tbTickMarkData: { tickMark: tickmarkDto.tickmark, tickMarkDescription: tickmarkDto.description, tickMarkDescriptionText: tickMarkDescText }
                };
                rows.push(eachITBViewRowData);
            });

            let tickMarkOptions = [];
            rows.forEach((r) => { tickMarkOptions.push(r.tbTickMarkData.tickMark); });

            const { check, value } = this.state;
          //  const { OptionValues } = this.props;
            const { tickmarkData } = this.props;

            //const options = [];
            //OptionValues.forEach(option => options.push(
            //    <Option
            //        key={option}
            //        id={option}
            //        value={this.state.value}
            //        handleChange={this.handleChange}
            //        handleClose={this.handleClose}
            //    />
            //));            

            const optionTickmark = [];
           // optionTickmark.push(<li><a>(None)</a></li>,
                //<li><a>imm</a></li>);
            console.log(tickmarkData)

            tickmarkData.forEach(option => {

                console.log(option);
                optionTickmark.push(
                    <Option
                        key={option.accountId}
                        accountId={option.accountId}
                        tickmark={option.tickmark}
                        id={option.description}
                        value={this.props.row.tbTickMarkData.tickMark}
                        handleChange={this.handleChange}
                        handleClose={this.handleClose}
                    />
                )
            });
            optionTickmark.push(<button className="fa fa-plus-circle addCustomButton" onClick={() => this.openTickmark(this.props.row.key, businessUnitId, businessUnitFSLevelId)}>Add Tickmark</button>);



            ///TODO Add custom options 
             // <select onChange={() => this.props.tickMarkSelectedChanged({ id: this.props.row.key, tickMark: this.onSelect.bind(this) })} value={this.props.row.tbTickMarkData.tickMark != null ? this.props.row.tbTickMarkData.tickMark : "--"} style={{ minWidth: "5em", height: "100%" }}>
                     //   {tickMarkOptions.map((x, y) => <option value={x} key={y}>{x}</option>)}
                   // </select>
            //return (               
            //    <div>
                  
            //        <div className="sel-box">
            //            <span className="select-dropdown">Select</span>
            //            <ul className="toc-odd">
            //                <li><a href="1">It's finally here</a></li>
            //                <li><a href="2">Improvements</a></li>
            //                <li><a href="3">Handling</a></li>
            //            </ul>
            //        </div>
            //    </div>     
            //);    

            return (
                <div className="sel-box">
                    <span id="select" className="select-dropdown" onClick={this.handleClose} >
                        {this.props.row.tbTickMarkData.tickMark != null ? this.props.row.tbTickMarkData.tickMark : "--"}
                        <div className="fa fa-caret-down" style={{ paddingLeft: "50px" }}></div>
                    </span>
                    <ul className="toc-odd" id="sel-option">                       
                            {this.state.check ? optionTickmark : null}                        
                    </ul>
                </div>
            )
        }
    }
}